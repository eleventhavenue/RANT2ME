generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String?        @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  conversations  Conversation[]
  moodEntries    MoodEntry[]
  sessions       Session[]
  userAnalytics  UserAnalytics?
  userSettings   UserSettings?
  lastActiveConversationId String?     @unique  // Add @unique here
  lastConversation        Conversation? @relation("LastActiveConversation", fields: [lastActiveConversationId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id            String             @id @default(cuid())
  userId        String
  title         String?
  status        ConversationStatus @default(ACTIVE)
  humeGroupId   String?
  lastMessageAt DateTime           @default(now())
  createdAt     DateTime           @default(now())
  updatedAt     DateTime           @updatedAt
  user          User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  messages      Message[]
  lastActiveFor User?              @relation("LastActiveConversation")

  @@index([userId, status])
  @@index([humeGroupId])
  @@index([userId, humeGroupId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  content        String
  role           MessageRole
  emotions       Json?
  metadata       Json?
  createdAt      DateTime     @default(now())
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model UserSettings {
  id                    String  @id @default(cuid())
  userId                String  @unique
  isDark                Boolean @default(false)
  volume                Int     @default(100)
  microphoneSensitivity Int     @default(75)
  language              String  @default("en")
  notifications         Boolean @default(true)
  autoConnect           Boolean @default(false)
  privacyMode           Boolean @default(false)
  user                  User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserAnalytics {
  id                   String   @id @default(cuid())
  userId               String   @unique
  totalConversations   Int      @default(0)
  totalMessages        Int      @default(0)
  lastActive           DateTime @default(now())
  averageEmotionScores Json?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  user                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model MoodEntry {
  id        String   @id @default(cuid())
  userId    String
  rating    Int
  note      String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ConversationStatus {
  ACTIVE
  ARCHIVED
  DELETED
}

enum MessageRole {
  USER
  ASSISTANT
}
